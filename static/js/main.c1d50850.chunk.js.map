{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","shift","isInfinite","props","infinite","handlePrevButton","step","itemWidth","setState","prevState","scrolledDist","Math","max","handleNextButton","images","frameSize","endOfScroll","length","min","this","animationDuration","carouselTransform","transform","transition","containerWidth","width","imgWidth","isDisabledPrev","isDisabledNext","className","style","map","image","alt","src","type","onClick","disabled","Component","App","handleChange","event","target","name","value","htmlFor","defaultValue","onChange","checked","React","ReactDOM","render","document","getElementById"],"mappings":"uPAiBaA,EAAb,4MACEC,MAAe,CACbC,MAAO,EACPC,WAAY,EAAKC,MAAMC,UAH3B,EAMEC,iBAAmB,WACjB,MAII,EAAKF,MAHPG,EADF,EACEA,KACAC,EAFF,EAEEA,UACAH,EAHF,EAGEA,SAGF,EAAKI,UAAS,SAACC,GACb,IAAMC,EAAeD,EAAUR,MAAQK,EAAOC,EAK9C,MAAO,CACLN,MALeG,EACZM,EAAeH,EAChBI,KAAKC,IAAI,EAAGF,QAjBtB,EAyBEG,iBAAmB,WACjB,MAMI,EAAKV,MALPW,EADF,EACEA,OACAR,EAFF,EAEEA,KACAS,EAHF,EAGEA,UACAR,EAJF,EAIEA,UACAH,EALF,EAKEA,SAGIY,GAAeF,EAAOG,OAASF,GAAaR,EAElD,EAAKC,UAAS,SAACC,GACb,IAAMC,EAAeD,EAAUR,MAAQK,EAAOC,EAK9C,MAAO,CACLN,MALeG,EACZM,EAAeM,EAChBL,KAAKO,IAAIR,EAAcM,QAxCjC,4CAgDE,WACE,MAKIG,KAAKhB,MAJPW,EADF,EACEA,OACAC,EAFF,EAEEA,UACAR,EAHF,EAGEA,UACAa,EAJF,EAIEA,kBAGMnB,EAAUkB,KAAKnB,MAAfC,MAEFoB,EAAoB,CACxBC,UAAU,cAAD,QAAiBrB,EAAjB,OACTsB,WAAW,GAAD,OAAKH,EAAL,OAGNI,EAAiB,CAAEC,MAAM,GAAD,QAAMlB,GAAaQ,EAAnB,OAExBW,EAAW,CACfD,MAAM,GAAD,QAAMlB,EAAN,OAEDoB,EAAiB1B,GAAS,IAAMkB,KAAKnB,MAAME,WAC3C0B,EAAiB3B,IAAUa,EAAOG,OAASF,GAAaR,IACvDY,KAAKnB,MAAME,WAElB,OACE,sBAAK2B,UAAU,WAAf,UACE,qBACEA,UAAU,qBACVC,MAAON,EAFT,SAIE,oBACEK,UAAU,gBACVC,MAAOT,EAFT,SAIGP,EAAOiB,KAAI,SAACC,GAAD,OACV,oBACEH,UAAU,gBADZ,SAIE,qBACEA,UAAU,eACVI,IAAG,UAAKD,GACRE,IAAKF,EACLF,MAAOJ,KANJM,UAab,sBAAKH,UAAU,wBAAf,UACE,wBACEM,KAAK,SACLN,UAAU,uBACVO,QAASjB,KAAKd,iBACdgC,SAAUV,EAJZ,kBASA,wBACEQ,KAAK,SACLN,UAAU,uBACVO,QAASjB,KAAKN,iBACd,UAAQ,OACRwB,SAAUT,EALZ,4BA5GV,GAA8BU,aCHxBC,E,4MACJvC,MAAQ,CACNc,OAAQ,CACN,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,gBAEFR,KAAM,EACNS,UAAW,EACXR,UAAW,IACXa,kBAAmB,IACnBhB,UAAU,G,EAIZoC,aAAe,SAACC,GACd,MAKIA,EAAMC,OAJRC,EADF,EACEA,KACAC,EAFF,EAEEA,MACA1B,EAHF,EAGEA,IACAN,EAJF,EAIEA,IAKF,IAHuBgC,IAAU1B,IAAQ0B,IAAUhC,GACrC,aAAT+B,EAGH,OAAQA,GACN,IAAK,YACH,EAAKnC,SAAS,CAAED,WAAYqC,IAC5B,MAEF,IAAK,YACH,EAAKpC,SAAS,CAAEO,WAAY6B,IAC5B,MAEF,IAAK,OACH,EAAKpC,SAAS,CAAEF,MAAOsC,IACvB,MAEF,IAAK,oBACH,EAAKpC,SAAS,CAAEY,mBAAoBwB,IACpC,MAEF,IAAK,WACH,EAAKpC,UAAS,SAACR,GAAD,MAAY,CAAEI,UAAWJ,EAAMI,aAC7C,MAEF,QACE,OAAO,EAIb,OAAO,EAAKJ,O,4CAGd,WACE,MAOImB,KAAKnB,MANPc,EADF,EACEA,OACAR,EAFF,EAEEA,KACAS,EAHF,EAGEA,UACAR,EAJF,EAIEA,UACAa,EALF,EAKEA,kBACAhB,EANF,EAMEA,SAGF,OACE,sBAAKyB,UAAU,MAAf,UAEE,qBACE,UAAQ,QACRA,UAAU,QAFZ,0BAKG,IACAf,EAAOG,OACP,IAPH,YAWA,uBAAMY,UAAU,OAAhB,UACE,wBAAOgB,QAAQ,OAAf,kBAEE,uBACEF,KAAK,OACLR,KAAK,SACLjB,IAAK,EACLN,IAAK,EACLkC,aAAcxC,EACdyC,SAAU5B,KAAKqB,kBAInB,wBAAOK,QAAQ,YAAf,uBAEE,uBACEF,KAAK,YACLR,KAAK,SACLjB,IAAK,EACLN,IAAKE,EAAOG,OACZ6B,aAAc/B,EACdgC,SAAU5B,KAAKqB,kBAInB,wBAAOK,QAAQ,YAAf,uBAEE,uBACEF,KAAK,YACLR,KAAK,SACLjB,IAAK,GACLN,IAAK,IACLN,KAAM,GACNwC,aAAcvC,EACdwC,SAAU5B,KAAKqB,kBAInB,wBAAOK,QAAQ,oBAAf,+BAEE,uBACEF,KAAK,oBACLR,KAAK,SACLjB,IAAK,IACLN,IAAK,KACLkC,aAAc1B,EACd2B,SAAU5B,KAAKqB,kBAInB,wBAAOK,QAAQ,WAAf,sBAEE,uBACEF,KAAK,WACLR,KAAK,WACLa,QAAS5C,EACT2C,SAAU5B,KAAKqB,qBAKrB,cAAC,EAAD,CACE1B,OAAQA,EACRR,KAAMA,EACNS,UAAWA,EACXR,UAAWA,EACXa,kBAAmBA,EACnBhB,SAAUA,W,GAzJF6C,IAAMX,WA+JTC,IC1KfW,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.c1d50850.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './Carousel.scss';\n\ninterface Props {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\ninterface State {\n  shift: number;\n  isInfinite: boolean;\n}\n\nexport class Carousel extends Component<Props, State> {\n  state: State = {\n    shift: 0,\n    isInfinite: this.props.infinite,\n  };\n\n  handlePrevButton = () => {\n    const {\n      step,\n      itemWidth,\n      infinite,\n    } = this.props;\n\n    this.setState((prevState) => {\n      const scrolledDist = prevState.shift - step * itemWidth;\n      const newShift = infinite\n        ? (scrolledDist % itemWidth)\n        : Math.max(0, scrolledDist);\n\n      return {\n        shift: newShift,\n      };\n    });\n  };\n\n  handleNextButton = () => {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      infinite,\n    } = this.props;\n\n    const endOfScroll = (images.length - frameSize) * itemWidth;\n\n    this.setState((prevState) => {\n      const scrolledDist = prevState.shift + step * itemWidth;\n      const newShift = infinite\n        ? (scrolledDist % endOfScroll)\n        : Math.min(scrolledDist, endOfScroll);\n\n      return {\n        shift: newShift,\n      };\n    });\n  };\n\n  render() {\n    const {\n      images,\n      frameSize,\n      itemWidth,\n      animationDuration,\n    } = this.props;\n\n    const { shift } = this.state;\n\n    const carouselTransform = {\n      transform: `translateX(${-shift}px)`,\n      transition: `${animationDuration}ms`,\n    };\n\n    const containerWidth = { width: `${+itemWidth * +frameSize}px` };\n\n    const imgWidth = {\n      width: `${+itemWidth}px`,\n    };\n    const isDisabledPrev = shift <= 0 && !this.state.isInfinite;\n    const isDisabledNext = shift >= (images.length - frameSize) * itemWidth\n       && !this.state.isInfinite;\n\n    return (\n      <div className=\"Carousel\">\n        <div\n          className=\"Carousel_container\"\n          style={containerWidth}\n        >\n          <ul\n            className=\"Carousel_list\"\n            style={carouselTransform}\n          >\n            {images.map((image) => (\n              <li\n                className=\"Carousei_item\"\n                key={image}\n              >\n                <img\n                  className=\"Carousel_img\"\n                  alt={`${image}`}\n                  src={image}\n                  style={imgWidth}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <div className=\"Сarousel_buttons\">\n          <button\n            type=\"button\"\n            className=\"Сarousel_button\"\n            onClick={this.handlePrevButton}\n            disabled={isDisabledPrev}\n          >\n            Prev\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"Сarousel_button\"\n            onClick={this.handleNextButton}\n            data-cy=\"next\"\n            disabled={isDisabledNext}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\n\nimport { Carousel } from './components/Carousel';\n\ninterface State {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      name,\n      value,\n      min,\n      max,\n    } = event.target;\n    const isValidValue = (+value >= +min && +value <= +max)\n      || name === 'infinite';\n\n    if (isValidValue) {\n      switch (name) {\n        case 'itemWidth':\n          this.setState({ itemWidth: +value });\n          break;\n\n        case 'frameSize':\n          this.setState({ frameSize: +value });\n          break;\n\n        case 'step':\n          this.setState({ step: +value });\n          break;\n\n        case 'animationDuration':\n          this.setState({ animationDuration: +value });\n          break;\n\n        case 'infinite':\n          this.setState((state) => ({ infinite: !state.infinite }));\n          break;\n\n        default:\n          return 0;\n      }\n    }\n\n    return this.state;\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1\n          data-cy=\"title\"\n          className=\"title\"\n        >\n          Carousel with\n          {' '}\n          {images.length}\n          {' '}\n          images\n        </h1>\n\n        <form className=\"form\">\n          <label htmlFor=\"step\">\n            Step:\n            <input\n              name=\"step\"\n              type=\"number\"\n              min={1}\n              max={5}\n              defaultValue={step}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label htmlFor=\"frameSize\">\n            FrameSize:\n            <input\n              name=\"frameSize\"\n              type=\"number\"\n              min={1}\n              max={images.length}\n              defaultValue={frameSize}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label htmlFor=\"itemWidth\">\n            ItemWidth:\n            <input\n              name=\"itemWidth\"\n              type=\"number\"\n              min={10}\n              max={1000}\n              step={10}\n              defaultValue={itemWidth}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label htmlFor=\"animationDuration\">\n            AnimationDuration:\n            <input\n              name=\"animationDuration\"\n              type=\"number\"\n              min={500}\n              max={1500}\n              defaultValue={animationDuration}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label htmlFor=\"infinite\">\n            Infinite:\n            <input\n              name=\"infinite\"\n              type=\"checkbox\"\n              checked={infinite}\n              onChange={this.handleChange}\n            />\n          </label>\n        </form>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n      </div>\n    );\n  }\n}\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}